// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String    @id // Clerk user ID (no @default since it comes from Clerk)
  email               String    @unique @db.Text // Hex-encoded encrypted data (text-safe binary)
  name                String?   @db.Text // Hex-encoded encrypted data (text-safe binary)
  isPremium           Boolean   @default(false) // Premium subscription status
  gdprConsentDate     DateTime? // When user gave GDPR consent
  consentWithdrawn    Boolean   @default(false) // If user withdrew consent
  dataRetentionUntil  DateTime? // When to delete user data
  lastLoginAt         DateTime? // For inactive user cleanup
  isDeleted           Boolean   @default(false) // Soft deletion flag
  deletedAt           DateTime? // When account was marked for deletion
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  teams   Team[]
  players Player[]
  matches Match[]

  @@map("users")
}

model Team {
  id        String   @id @default(cuid())
  name      String   @db.Text // Hex-encoded encrypted data (text-safe binary)
  isDeleted Boolean  @default(false) // Soft deletion flag
  deletedAt DateTime? // When team was marked for deletion
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  players   Player[]
  matches   Match[]

  @@map("teams")
}

model Player {
  id        String   @id @default(cuid())
  name      String   @db.Text // Hex-encoded encrypted data (text-safe binary)
  goals     Int      @default(0)
  assists   Int      @default(0)
  isDeleted Boolean  @default(false) // Soft deletion flag
  deletedAt DateTime? // When player was marked for deletion
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId    String?
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  matchStats PlayerMatchStat[]

  @@map("players")
}

model Match {
  id           String   @id @default(cuid())
  opponent     String
  date         DateTime
  goalsFor     Int      @default(0)
  goalsAgainst Int      @default(0)
  isFinished   Boolean  @default(false)
  matchType    String   @default("league") // "league" or "cup"
  notes        String?  // Optional match notes
  selectedPlayerIds String[] @default([]) // Array of player IDs selected for this match
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  userId       String
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId       String?
  team         Team?             @relation(fields: [teamId], references: [id], onDelete: SetNull)
  playerStats  PlayerMatchStat[]

  @@map("matches")
}

model PlayerMatchStat {
  id        String @id @default(cuid())
  goals     Int    @default(0)
  assists   Int    @default(0)

  // Relations
  playerId  String
  matchId   String
  player    Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  match     Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([playerId, matchId])
  @@map("player_match_stats")
}
